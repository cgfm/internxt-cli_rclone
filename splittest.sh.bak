#!/bin/bash



#!/bin/bash

set -e

additional_flags="--log-file /path/to/logfile.log --log-format date,time,UTC"  # Adjust this variable as needed

# Input commands
commands=(
    "rm -f /data/src_audiobooks && rclone lsf --files-only -R /media/audiobookshelf/audiobooks | sort > /data/src_audiobooks"
    "[ ! -f /data/dst_audiobooks ] || [ ! -s /data/dst_audiobooks ] && rclone lsf --files-only -R Internxt:Audiobooks | sort > /data/dst_audiobooks"
    "comm -23 /data/src_audiobooks /data/dst_audiobooks > /data/need-to-transfer"
)

# Iterating over each command
for command in "${commands[@]}"; do
    # Split the command into parts by '&&', '||', and '|'
    IFS=' ' parts=()
    while IFS= read -r part; do
        parts+=("$part")
    done < <(echo "$command" | awk '{ gsub(/&&|\|\||\|/, " & "); print }' | tr ' ' '\n')

    # Process each part
    updated_command=""
    for part in "${parts[@]}"; do
        trimmed_part=$(echo "$part" | xargs)  # Trim leading/trailing whitespaces
        
        # Check if the part starts with 'rclone'
        if [[ $trimmed_part == rclone* ]]; then
            # Append additional flags to the rclone command
            updated_command+="$trimmed_part $additional_flags"  # Append flags to the rclone command
        else
            updated_command+="$trimmed_part"  # Keep the original part
        fi

        # Add back the original delimiters
        if [[ $part =~ (&&|\|\||\|) ]]; then
            updated_command+=" ${BASH_REMATCH[0]}"
        fi
    done

    # Clean up the command to remove any trailing delimiters
    updated_command=$(echo "$updated_command" | sed 's/[&|]*$//')

    # Output the updated command
    echo "$updated_command"
done
