name: Build and Push Docker Image

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to create the release from'
        required: true
        default: 'main'
      new_release:
        description: 'New release version (optional)'
        required: false
      create_release:
        description: 'Create a new release?'
        required: true
        default: 'false'  # Default to not create a release
  
  push:
    branches:
      - main  # Set the source branch to 'main'
    paths-ignore:
      - README.md  # Ignore changes to README.md
      - .git/**
      - .github/**

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username stored as a secret
          password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password stored as a secret

      - name: Get current version
        id: get_version
        run: |
          # Fetch all tags
          git fetch --tags

          # Check if user provided a new version
          if [ -n "${{ github.event.inputs.new_version }}" ]; then
            VERSION="${{ github.event.inputs.new_version }}"
            echo "Using provided version: $VERSION"
          else
            # Get the latest tag on the specified branch
            VERSION=$(git tag --points-at HEAD | sort -V | tail -n 1)

            if [ -z "$VERSION" ]; then
              echo "No tags found for the current commit in branch ${{ github.event.inputs.branch }}. Continuing without a version."
              VERSION=""  # Set VERSION to an empty string to indicate no version found
            else
              echo "Latest version: $VERSION"

              # Increment the last number of the version
              IFS='.' read -ra ADDR <<< "$VERSION"
              LAST_INDEX=$((${#ADDR[@]} - 1))
              ADDR[$LAST_INDEX]=$((${ADDR[$LAST_INDEX]} + 1))
              VERSION="${ADDR[*]}"
              echo "New version will be: $VERSION"
            fi
          fi

          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Determine Docker Image Tag
        id: docker_tag
        run: |
          if [ "${{ github.event.inputs.branch }}" == "main" ]; then
            IMAGE_TAG="latest"
          else
            IMAGE_TAG="${{ github.event.inputs.branch }}"
          fi
          echo "DOCKER_IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "Docker image tag set to: $DOCKER_IMAGE_TAG"

      - name: Create Release
        id: create_release
        run: |
          if [ -n "${{ github.event.inputs.new_version }}" ]; then
            echo "Creating new release: ${{ env.RELEASE_VERSION }}"
            gh release create ${{ env.RELEASE_VERSION }} --title "Release ${{ env.RELEASE_VERSION }}" --notes "Release notes for version ${{ env.RELEASE_VERSION }}" --target ${{ github.event.inputs.branch }}
          else
            echo "No new release version provided. Skipping release creation."
          fi

      - name: Build and Push Docker Image
        run: |
          if [ -n "$VERSION" ]; then
            echo "Building Docker image with tag: $DOCKER_IMAGE_TAG"
            docker build -t cgfm/internxt-cli_rclone:$DOCKER_IMAGE_TAG .
            docker push cgfm/internxt-cli_rclone:$DOCKER_IMAGE_TAG
          else
            echo "No version found. Skipping Docker image tagging."
          fi

      - name: Logout from Docker Hub
        run: docker logout