name: Build and Push Docker Image

on:
  workflow_dispatch:
    inputs:
      new_version:
        description: "Create a new release version."
        type: boolean
        required: false
        default: false
      new_version_name:
        description: 'Overwrite release version name (optional)'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username stored as a secret
          password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password stored as a secret

      - name: Set Branch Name
        id: set_branch_name
        run: |
          # Get the branch name from the context
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "Branch name is $BRANCH_NAME" 
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Get the latest release
        id: get_release
        run: |
          if [ "${{ github.event.inputs.new_version_name }}" == "" ]; then
            # Get the latest release tag
            LATEST_TAG=$(git fetch --tags && git tag -l --sort=-creatordate | head -n 1)
            echo "Latest release tag: $LATEST_TAG"

            # Extract major, minor, patch and pre-release
            if [[ $LATEST_TAG =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)([-_ ].*)?$ ]]; then
                MAJOR=${BASH_REMATCH[1]}
                MINOR=${BASH_REMATCH[2]}
                PATCH=${BASH_REMATCH[3]}
                PRE_RELEASE=${BASH_REMATCH[4]}
                
                if [ "$BRANCH_NAME" != "main" ] || [ -z "$PRE_RELEASE" ]; then
                  # Increment the patch version
                  NEW_PATCH=$((PATCH + 1))
                else
                  NEW_PATCH=$PATCH
                fi

                if [ "$BRANCH_NAME" != "main" ]; then
                  PRE_RELEASE="_$BRANCH_NAME"
                else
                  PRE_RELEASE=""
                fi

                if [[ -n "$PRE_RELEASE" ]]; then
                  NEW_TAG="$MAJOR.$MINOR.$NEW_PATCH$PRE_RELEASE"
                else
                  NEW_TAG="$MAJOR.$MINOR.$NEW_PATCH"
                fi

                NEW_TAG="${NEW_TAG// /_}"

                echo "New release tag: $NEW_TAG"
                echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
            else
                echo "Error: Latest tag format is invalid."
                exit 1
            fi
          else
              echo "NEW_TAG=${{ github.event.inputs.new_version_name }}" >> $GITHUB_ENV
          fi

      - name: Create Release
        id: create_release
        run: |
          if [ "${{ github.event.inputs.new_version }}" == "true" ] &&  [ -n "$NEW_TAG" ]; then
              echo "Creating new release: $NEW_TAG"
              echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token
              gh release create "$NEW_TAG" --target "$BRANCH_NAME" 
          else
            echo "Release creation skipped."
          fi

      - name: Build and Push Docker Image
        run: |
          if [ "$BRANCH_NAME" == "main" ]; then
            IMAGE_TAG="cgfm/internxt-cli_rclone:latest"
          else
            IMAGE_TAG="cgfm/internxt-cli_rclone:$BRANCH_NAME"
          fi
          
          echo "Building Docker image with tag: $IMAGE_TAG"

          # Build the Docker image
          docker build -t $IMAGE_TAG .

          # Push the image with the main tag
          docker push $IMAGE_TAG

          # If new version is provided, tag with the new version as well
          if [ "${{ github.event.inputs.new_version }}" == "true" ] &&  [ -n "$NEW_TAG" ]; then
            NEW_IMAGE_TAG="cgfm/internxt-cli_rclone:$NEW_TAG"
            echo "Tagging image with new version: $NEW_IMAGE_TAG"
            docker tag $IMAGE_TAG $NEW_IMAGE_TAG
            docker push $NEW_IMAGE_TAG
          fi

      - name: Logout from Docker Hub
        run: docker logout
